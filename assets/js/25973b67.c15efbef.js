"use strict";(self.webpackChunkcodewithpablo_docs=self.webpackChunkcodewithpablo_docs||[]).push([[254],{4306:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"commits","title":"\ud83d\udcdd Commit Guidelines","description":"We follow Conventional Commits to maintain a structured and meaningful commit history.","source":"@site/docs/commits.md","sourceDirName":".","slug":"/commits","permalink":"/codewithpablo-docs/docs/commits","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"\ud83d\udee0 Husky Configuration","permalink":"/codewithpablo-docs/docs/husky"},"next":{"title":"\ud83d\udd17 Aliases in Vite & TypeScript","permalink":"/codewithpablo-docs/docs/aliases"}}');var i=t(4848),c=t(8453);const o={},r="\ud83d\udcdd Commit Guidelines",d={},l=[{value:"\u2705 Commit Message Format",id:"-commit-message-format",level:2},{value:"<strong>\ud83d\udd39 Common Commit Types</strong>",id:"-common-commit-types",level:3},{value:"<strong>\ud83d\udccc Example Commit Messages</strong>",id:"-example-commit-messages",level:3},{value:"<strong>\ud83d\udca1 Best Practices</strong>",id:"-best-practices",level:3}];function a(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"-commit-guidelines",children:"\ud83d\udcdd Commit Guidelines"})}),"\n",(0,i.jsxs)(s.p,{children:["We follow ",(0,i.jsx)(s.a,{href:"https://www.conventionalcommits.org/en/v1.0.0/",children:(0,i.jsx)(s.strong,{children:"Conventional Commits"})})," to maintain a structured and meaningful commit history."]}),"\n",(0,i.jsx)(s.h2,{id:"-commit-message-format",children:"\u2705 Commit Message Format"}),"\n",(0,i.jsx)(s.p,{children:"Each commit message should follow this format:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sh",children:"<type>(<optional scope>): <short message>\n"})}),"\n",(0,i.jsx)(s.h3,{id:"-common-commit-types",children:(0,i.jsx)(s.strong,{children:"\ud83d\udd39 Common Commit Types"})}),"\n",(0,i.jsxs)(s.table,{children:[(0,i.jsx)(s.thead,{children:(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.th,{children:"Type"}),(0,i.jsx)(s.th,{children:"Description"})]})}),(0,i.jsxs)(s.tbody,{children:[(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"feat"})}),(0,i.jsx)(s.td,{children:"Introduces a new feature"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"fix"})}),(0,i.jsx)(s.td,{children:"Fixes a bug"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"docs"})}),(0,i.jsx)(s.td,{children:"Documentation updates"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"chore"})}),(0,i.jsx)(s.td,{children:"Maintenance tasks (e.g., build scripts, dependencies)"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"test"})}),(0,i.jsx)(s.td,{children:"Adding or modifying tests"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"refactor"})}),(0,i.jsx)(s.td,{children:"Code restructuring without changing functionality"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"style"})}),(0,i.jsx)(s.td,{children:"Formatting changes, missing semi-colons, etc. (no logic changes)"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"perf"})}),(0,i.jsx)(s.td,{children:"Performance improvements"})]}),(0,i.jsxs)(s.tr,{children:[(0,i.jsx)(s.td,{children:(0,i.jsx)(s.code,{children:"ci"})}),(0,i.jsx)(s.td,{children:"Changes to CI/CD workflows"})]})]})]}),"\n",(0,i.jsx)(s.h3,{id:"-example-commit-messages",children:(0,i.jsx)(s.strong,{children:"\ud83d\udccc Example Commit Messages"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-sh",children:'git commit -m "feat(auth): add login functionality"\ngit commit -m "fix(cart): resolve issue with item removal"\ngit commit -m "docs(readme): update installation instructions"\ngit commit -m "chore(deps): update eslint dependencies"\n'})}),"\n",(0,i.jsx)(s.h3,{id:"-best-practices",children:(0,i.jsx)(s.strong,{children:"\ud83d\udca1 Best Practices"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\u2705 ",(0,i.jsx)(s.strong,{children:"Use imperative mood"})," \u2192 ",(0,i.jsx)(s.code,{children:"fix issue"})," instead of ",(0,i.jsx)(s.code,{children:"fixed issue"})]}),"\n",(0,i.jsxs)(s.li,{children:["\u2705 ",(0,i.jsx)(s.strong,{children:"Keep messages concise but descriptive"})]}),"\n",(0,i.jsxs)(s.li,{children:["\u2705 ",(0,i.jsx)(s.strong,{children:"Use scopes when relevant"})," \u2192 ",(0,i.jsx)(s.code,{children:"(auth)"}),", ",(0,i.jsx)(s.code,{children:"(cart)"}),", ",(0,i.jsx)(s.code,{children:"(docs)"}),", etc."]}),"\n",(0,i.jsxs)(s.li,{children:["\u2705 ",(0,i.jsx)(s.strong,{children:"Separate concerns into different commits"})]}),"\n"]}),"\n",(0,i.jsxs)(s.p,{children:["By following ",(0,i.jsx)(s.strong,{children:"Conventional Commits"}),", we maintain a clear and meaningful commit history that improves collaboration and project tracking. \ud83d\ude80"]})]})}function h(e={}){const{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>r});var n=t(6540);const i={},c=n.createContext(i);function o(e){const s=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(c.Provider,{value:s},e.children)}}}]);